// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   String   // 格式: YYYY-MM-DD
  endDate     String   // 格式: YYYY-MM-DD
  startTime   String   // 格式: HH:MM
  endTime     String   // 格式: HH:MM
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 關聯
  participants Participant[]
  timeSlots    TimeSlot[]
  votes        Vote[]

  @@map("events")
}

model Participant {
  id       String   @id @default(cuid())
  eventId  String
  name     String
  email    String?
  joinedAt DateTime @default(now())

  // 關聯
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  timeSlots TimeSlot[]
  votes     Vote[]

  @@map("participants")
}

model TimeSlot {
  id            String   @id @default(cuid())
  eventId       String
  participantId String
  day           String   // 格式: monday, tuesday, etc.
  timeStart     String   // 格式: HH:MM
  timeEnd       String   // 格式: HH:MM
  createdAt     DateTime @default(now())

  // 關聯
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@map("time_slots")
}

model Vote {
  id            String   @id @default(cuid())
  eventId       String
  participantId String
  timeSlotId    String
  voteType      String   // yes, no, maybe
  createdAt     DateTime @default(now())

  // 關聯
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  timeSlot   TimeSlot    @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)

  // 唯一約束：每個參與者對每個時間段只能投票一次
  @@unique([participantId, timeSlotId])
  @@map("votes")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
} 